"""
Django settings for OTCCPScript project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import  config,Csv
import dj_database_url
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5zgr+d3hu01qqr3kkslk&%8&vu_8a3=^%@bd&2&&y^!b(fh_e^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.localhost', '127.0.0.1','[::1]','fierce-journey-20199-e167156baf87.herokuapp.com','http://localhost:3000',"192.168.0.50"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'django_crontab',

    #Apps
    'randomforest',
    'silk',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware'
]

ROOT_URLCONF = 'OTCCPScript.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OTCCPScript.wsgi.application'



# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# if config('MODE') == 'dev':


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

    

# else:
#     if config("DATABASE_URL", None) is None:
#         raise Exception("DATABASE_URL environment variable not defined")
#     DATABASES = {
#         "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
#     }

db_from_env = dj_database_url.config(conn_max_age  = 5)
DATABASES['default'].update(db_from_env)



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'


USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



DEFAULT_FILE_STORAGE='cloudflare_images.storage.CloudflareImagesStorage'
# CLOUDFLARE_IMAGES_ACCOUNT_ID=config('CLOUDFLARE_IMAGES_ACCOUNT_ID')
# CLOUDFLARE_IMAGES_API_TOKEN=config('CLOUDFLARE_IMAGES_API_TOKEN')
# CLOUDFLARE_IMAGES_ACCOUNT_HASH=config('CLOUDFLARE_IMAGES_ACCOUNT_HASH')




DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
AWS_STORAGE_BUCKET_NAME = 'iso-trials-regions'
AWS_S3_ACCESS_KEY_ID = 'AKIAR72FD7RJ3APMEI6C'
AWS_S3_SECRET_ACCESS_KEY = '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'
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
AWS_QUERYSTRING_AUTH = False
AWS_HEADERS = {
    'Access-Control-Allow-Origin':'*',
}
# AWS_DEFAULT_ACL =
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
# AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_LOCATION = 'static'

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )

STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'

MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# DEFAULT_FILE_STORAGE = 'mysite.storage_backends.MediaStorage'  

# configuring the location for media
MEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, 'media')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

        # 'schedule': crontab(hour=0, minute=0),


# Redis broker settings
# BROKER_URL = os.environ.get('REDIS_URL', 'rediss://:pa28af3da924f617b2b5d67ef73d52778d9c46162be9a5da8490582d892d59c76@ec2-54-165-98-141.compute-1.amazonaws.com:22299/0?ssl_cert_reqs=CERT_NONE')
# CELERY_RESULT_BACKEND = BROKER_URL

# Redis broker settings
# BROKER_URL = os.environ.get('REDIS_URL', 'redis://default:GhzwMeEhDjJqqLN2k3ONOwaS9z1nXy4J@redis-12414.c10.us-east-1-2.ec2.cloud.redislabs.com:12414')
# CELERY_RESULT_BACKEND = BROKER_URL
# DJANGO_CELERY_BEAT_TZ_AWARE=False
# CELERYD_HIJACK_ROOT_LOGGER = False


# Celery settings
# CELERY_IMPORTS = ['OTCCPScript.tasks']
# CELERY_TIMEZONE = 'UTC'
# CELERY_BEAT_SCHEDULE = {
#     'run-every-2-minutes': {
#         'task': 'OTCCPScript.tasks.process_analysis_run',
#         'schedule': crontab(minute='*/2'),
#     },
# }

###Silk Settings###
SILKY_PYTHON_PROFILER = True  # Enable Python code profiling
SILKY_PYTHON_PROFILER_BINARY = True  # Record Python code as binary data
